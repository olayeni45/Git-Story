how to initialize a local repository
git init

how to add all the files in the local repository
git add . 

how to add individual files in the local repository
git add <fileName>

how to remove files but add them later
git rm --cached -r .

to switch to a new branch
git checkout <branchName>

to delete branch if it has been merged with master
git branch -d <branchName>

to delete branch if it has not been merged with master
git branch -D <branchName>

to create a new branch and automatically checkout 
git checkout -b <branchName>

how to create a new branch 
git branch <branchName>

to list all the branches
git branch

to merge a branch
git merge <branchName>

merge conflict: git add .
		git commit (press shift colon and wq)

to push code
git push <git repo to push the code> <branchName>
e.g git push https://github.com/olayeni45/Git-Story.git master

to create an alias for the url
git remote add origin https://github.com/olayeni45/Git-Story.git

new push statement
git push -u origin master

to clone a local repository 
git clone <repo url>

If you clone or fork a repo, you do not have to set the origin variable to the 
url from github

to check for the url
git remote -v

Pull request
pull request gets all the code and merges it from the master branch to your local computer
syntax: git pull origin master

to push a branch to github
git push origin <branchName>

to remove .env before pushing
git rm -r --cached .env

to remove node_modules before pushing after it has been staged
git rm -r --cached node_modules

to remove gitignore
git rm -r --cached .gitignore

how to change the url of heroku
heroku git:remote -a <your app name>

how to check the commits made by people
git log

how to squash the commit message to a line
git log --oneline

how to check the status of the working tree
git status

how to check the changes to the file made in the working directory
git diff

how to revert changes made to a file
git restore <fileName>

Synopsis of Pull requests and merge
Pull requests let you tell others about changes you've pushed to a branch in a repository on GitHub. 
Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up
commits before your changes are merged into the base branch.

Once you've created a pull request, you can push commits from your topic branch to add them to your existing pull
request. These commits will appear in chronological order within your pull request and the changes will be visible
in the "Files changed" tab.

Creating a pull request
Create a pull request to propose and collaborate on changes to a repository. These changes are proposed in a branch,
which ensures that the default branch only contains finished and approved work.

Configuring your username and email on git bash
git config --global user.name "Olayeni"
git config --global user.email "Olayeni45@gmail.com"

To see the state of the code at an earlier stage
git checkout <commitId>

To revert a commit
git revert <commitId>

To reset the changes of a commit
git reset <commitId> --hard

To list all branches
git branch -a

To list all configurations
git config --list

To change the default editor of git
git config --global core.editor "notepad"

To check for help for a particular git command
git <command> --help
There are two options to this
a. git pull --help : This opens a webpage to assist you with git pull
b. git pull -h

To add and commit with one command
git commit -a -m "Commit message"

To ammend your last commit message
git commit --amend

How to track new changes without providing a new commit message
git commit --amend --no-edit

To remove a file from staging area
git restore --staged <fileName>

SSH Connections - Secure Socket Shell
How to add a SSH key
i. Navigate to your local project repository
ii. Right click and select "Git GUI here"
iii. On the interface, navigate to help and click on generate or show key if you already have a SSH key
iv. Enter a passphrase
v. Confirm your passphrase
vi. A unique SSH key would be generated. Navigate to your github account, go to SSH and GPG keys, 
add new SSH key and paste your SSH key There

To set your remote url to use SSH url
git remote set-url origin <ssh url>


PULL REQUESTS
Rebase Vs Squash commits
 Rebasing is the process of moving or combining a sequence of commits to a new base commit.
 Rebasing is most useful and easily visualized in the context of a feature branching workflow.


Git fetch
This fetches changes from the remote repository and adds it to your local repository without merging
git fetch --all to fetch all the changes 

To fetch and merge: Git fetch + Git merge

Git pull = fetch + merge

Git rebase vs Git pull --rebase
Git rebase just rebases the branch
Git pull --rebase = git fetch + git rebase


FOUR RULES OF HAPPY WORK WITH GIT
1. Always create branches from the master
2. Force update and change commit history only on your branches
3. Use --force-with-lease instead of -f for git push e.g git push --force-with-lease instead of git push -fetch
4. Always rebase on the origin master branch before creating a pull request

Interactive rebase
git rebase -i

Git reset
This is used to undo changes

Git reset --soft vs Git reset --mixed vs Git reset --hard

Git reset --soft moves you back to your staging area (git commit) all the changes are still added to the staging area
you just have to git commit the changes

Git reset --mixed moves you back to the working tree (git add .) the files are present in the working tree but are
not added to the staging area. you would have to do git add then git commit. This is the default git reset

git reset --hard deletes all the changes you've made so far

How to stash changes
git add .
git stash

This saves what you were working on in another place for future use
Stash works according to LIFO principle - Last in First Out

To add the stash changes to your current branch
git stash apply

TO list all the stash you have
Git stash list
Result of git stash list: stash@{0}: WIP on master: 8edc88e Testing stash
						  stash@{1}: WIP on master: 8aa268c Git reset
Since stash works on a Stack structure, you could apply the latest stash change through git stash apply stash@{1}

How to add a custom stash message
git stash save <stashMessage>
eg: git stash save "Modified index.html"

To remove a stash from the list of stashes
git stash pop

To add all the files to the staging area and stash
git stash -u

How to create a new branch from stash
git stash branch <newBranchName>

to drop a particular stash
git stash drop stash@{0}

to delete all stashes
git stash clear


Git reflog
Reflog is a mechanism to record when the tip of branches are updated. This command is to manage the
information recorded in it. Basically every action you perform inside of Git where data is stored, you
can find it inside of the reflog.
git reflog

To show reflog for a specific period of time
git reflog --since="1.hour.ago"

git log -g

Cherry-picking
git cherry-pick is a powerful command that enables arbitrary Git commits to be picked by reference and appended 
to the current working HEAD. Cherry picking is the act of picking a commit from a branch and applying it to another. 
Git cherry-pick can be useful for undoing changes.

git cherry-pick <commit checkSum>
e.g git cherry-pick f6b55b4


Best practices of using cherry-pick
1. Prefer merge or rebase when possible
2. Avoid creating any duplication
3. Use 'x' option during cherry-pick e.g git cherry-pick -x to apply the commit message to the cherry-pick